Coded in Python3.12 with Anaconda Prompt and Cursor or VScode

Replace NAME with what ever you want virtual env named.

conda create -n NAME python=3.12

Activate your conda virtual env with: conda activate NAME

Check python version with: python --version




Password Generator Code:





import random
import string
import pyperclip  # For copy to clipboard (install with: pip install pyperclip)

class PasswordGenerator:
    def __init__(self):
        self.lowercase = string.ascii_lowercase
        self.uppercase = string.ascii_uppercase
        self.numbers = string.digits
        self.symbols = "!@#$%^&*()_+-=[]{}|;:,.<>?"

    def generate_passwords(self, length, count, use_upper=True, use_lower=True, 
                         use_numbers=True, use_symbols=True):
        # Build character set based on user preferences
        chars = ''
        if use_lower:
            chars += self.lowercase
        if use_upper:
            chars += self.uppercase
        if use_numbers:
            chars += self.numbers
        if use_symbols:
            chars += self.symbols

        # Ensure at least one character set is selected
        if not chars:
            return ["Error: Please select at least one character type!"]

        # Generate multiple passwords
        passwords = []
        for _ in range(count):
            password = ''.join(random.choice(chars) for _ in range(length))
            passwords.append(password)
        
        return passwords

def main():
    generator = PasswordGenerator()
    
    print("\nüîê Advanced Password Generator üîê\n")
    
    try:
        # Get user preferences
        length = int(input("Password length (8-50): "))
        if not 8 <= length <= 50:
            print("Please choose a length between 8 and 50!")
            return

        count = int(input("Number of passwords to generate (1-10): "))
        if not 1 <= count <= 10:
            print("Please choose between 1 and 10 passwords!")
            return

        # Get complexity preferences
        print("\nPassword complexity options:")
        use_upper = input("Include uppercase letters? (y/n): ").lower() == 'y'
        use_lower = input("Include lowercase letters? (y/n): ").lower() == 'y'
        use_numbers = input("Include numbers? (y/n): ").lower() == 'y'
        use_symbols = input("Include symbols? (y/n): ").lower() == 'y'

        # Generate and display passwords
        print("\nüìã Generated Passwords:")
        print("-" * 50)
        
        passwords = generator.generate_passwords(
            length, count, use_upper, use_lower, use_numbers, use_symbols
        )

        for i, password in enumerate(passwords, 1):
            print(f"{i}. {password}")

        # Ask if user wants to copy a specific password
        if len(passwords) > 0:
            print("\nWould you like to copy a password to clipboard?")
            choice = input(f"Enter password number (1-{len(passwords)}) or 'n' to exit: ")
            if choice.isdigit() and 1 <= int(choice) <= len(passwords):
                pyperclip.copy(passwords[int(choice)-1])
                print("‚úÖ Password copied to clipboard!")

    except ValueError:
        print("‚ùå Please enter valid numbers!")
    except KeyboardInterrupt:
        print("\n\nPassword generation cancelled.")

if __name__ == "__main__":
    main()


Save it as: password_generator.py



This version features:
Multiple password generation (1-10 passwords)
Customizable length (8-50 characters)
4 complexity options:
Uppercase letters
Lowercase letters
Numbers
Special symbols
Copy to clipboard functionality
Error handling
Emoji-enhanced interface


Navigate to the directory containing your password_generator.py file
Create the executable with an icon and a single file:


ICON SCRIPT#--



# create_icon.py
from PIL import Image, ImageDraw

# Create a new image with a transparent background
img = Image.new('RGBA', (256, 256), (0, 0, 0, 0))
draw = ImageDraw.Draw(img)

# Draw a key shape (improved design)
# Key head
draw.ellipse([80, 80, 140, 140], fill='#FFD700')  # Bright gold color
draw.ellipse([95, 95, 125, 125], fill=(0, 0, 0, 0))  # Inner circle

# Key shaft
draw.rectangle([120, 110, 180, 130], fill='#FFD700')

# Key teeth
draw.rectangle([160, 110, 180, 120], fill='#FFD700')
draw.rectangle([160, 120, 180, 130], fill='#FFD700')
draw.rectangle([160, 130, 180, 140], fill='#FFD700')

# Save as ICO file
img.save('key_icon.ico', format='ICO')
print("‚úÖ Icon file created successfully!")



SAVE SCRIPT AS: create_icon.py

To Create Icon: python create_icon.py

verify icon exists: dir key_icon.ico

To use this script: pip install pyperclip

Run it from the command line: python password_generator.py

pip install pillow

pip install pyinstaller

pyinstaller --onefile --name PasswordGenerator --icon=key_icon.ico password_generator.py

.EXE without icon: pyinstaller --onefile --name PasswordGenerator password_generator.py

After running PyInstaller:
A dist folder will be created
Inside it, you'll find PasswordGenerator.exe
You can move this .exe file anywhere and it will run independently

Make sure both files (create_icon.py and password_generator.py) are in the same directory when you run these commands.

BAM, Done! program was turned into executable!

Made by Zechariah P. 
AKA DreadPirate.
No License, use how ever you see fit.

When Running the .exe it will say 8-50 chars, type the length you want then hit Enter. It will prompt you to Hit Y or N on special chars/caps/snakecase/Special chars. Then will generate your passwords!




